{"version":3,"file":"hooks.cjs.production.min.js","sources":["../src/utils/array.ts","../src/useSelection/useSelection.tsx"],"sourcesContent":["// TODO:\n// We need to test whether it's a good idea to store these values\n// in plain arrays and loop over so many times when adding or removing.\n// A better option might be using \"Map\" or an object which allows for\n// easy access and removal.\n// The test should also include check if the render method is okay with\n// using Object.key(obj).map(...) in case of using objects.\n// For the time being, we don't care since we never really store more than\n// 20-30 (max) of these selections at onces.\n\n// Comment:\n// This is used for combining two arrays of elements of the same\n// type into an array without duplicates. This function is\n// used when we need to keep a reference to a selection of items\n// mostly found in \"context\".\n// The reason for accepting a \"filter\" function is so we can\n// compare the values without any set rules. We want to compare\n// campaigns as well as kpis which have different comparison functions.\nexport function union<T>(\n  source: T[],\n  items: T[],\n  filter?: (a: T, b: T) => boolean\n): T[] {\n  const filterFn =\n    typeof filter === 'function' ? filter : (a: any, b: any) => a === b;\n\n  return items.reduce(\n    (prev, next) => {\n      if (!prev.some(p => filterFn(p, next))) {\n        prev.push(next);\n      }\n      return prev;\n    },\n    [...source]\n  );\n}\n\n// Comment:\n// This is used for creating a difference array of elements of the same\n// type into an array without duplicates. This function is similar to\n// \"union\" helper. In this case, we are removing an item from\n// the reference array which is usually stored in \"context\" for alter\n// use. The reason for accepting \"filter\" function is so we can\n// compare the values without any set rules. We want to compare\n// campaigns as well as kpis which have different comparison functions.\nexport function difference<T>(\n  source: T[],\n  items: T[],\n  filter?: (a: T, b: T) => boolean\n): T[] {\n  const filterFn =\n    typeof filter === 'function' ? filter : (a: any, b: any) => a === b;\n  return source.filter(s => !items.some(i => filterFn(s, i)));\n}\n\n// Comment:\n// To make sure we always have array of items\nexport function toArr<T>(items: T | T[]): T[] {\n  return !Array.isArray(items) ? [items] : [...items];\n}\n\n// Comment:\n// Little helper to check if an array is empty\nexport function emptyArr(arr: any[]) {\n  return arr.length === 0;\n}\n","// @flow\n/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport { toArr, difference, union } from '../utils/array';\n\nexport type CompareFn<T> = (a: T, b: T) => boolean;\n\nexport type Options<T> = {\n  initialSelected?: T[];\n  compareFn?: CompareFn<T>;\n};\n\nexport type State<T> = {\n  selected: T[];\n  initialSelected: T[];\n  compareFn: CompareFn<T>;\n};\n\nconst MSG = {\n  ADD: 'ADD',\n  REMOVE: 'REMOVE',\n  RESET: 'RESET',\n} as const;\n\n// TODO: figure out how to use it without hardcoded values\n// it does not want to take the vales from the MSG above.\ntype Message<T> =\n  | { type: 'ADD'; payload: T[] }\n  | { type: 'REMOVE'; payload: T[] }\n  | { type: 'RESET'; payload: T[] };\n\nfunction defaultCompareFn(source: any, check: any) {\n  if (typeof source === 'string' && typeof check === 'string') {\n    return source === check;\n  } else if (typeof check === 'object' && typeof check === 'object') {\n    return source.id === check.id;\n  }\n  throw new Error('useSElection: wrong compareFn builder');\n}\n\nfunction reducer<T>(state: State<T>, msg: Message<T>) {\n  switch (msg.type) {\n    case MSG.ADD: {\n      return {\n        ...state,\n        selected: union<T>(state.selected, msg.payload, state.compareFn),\n      };\n    }\n    case MSG.REMOVE: {\n      return {\n        ...state,\n        selected: difference<T>(state.selected, msg.payload, state.compareFn),\n      };\n    }\n    case MSG.RESET: {\n      return {\n        ...state,\n        selected: state.initialSelected,\n      };\n    }\n    default: {\n      // TODO: change this into a function which is reused and stripped\n      // from the code in compile process. The same happens in other places\n      if (process.env.NODE_ENV !== 'production') {\n        // @ts-ignore\n        throw new Error(`useSelection: Unsupported action type: ${msg.type}`);\n      }\n      return state;\n    }\n  }\n}\n\n// TODO: change initial data if it changes in a React.useEffect();\nfunction useSelection<T>({\n  initialSelected = [],\n  compareFn = defaultCompareFn,\n}: Options<T> = {}) {\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<State<T>, Message<T>>\n  >(reducer, {\n    selected: initialSelected,\n    initialSelected: initialSelected,\n    compareFn,\n  });\n\n  const add = React.useCallback(\n    (adding: T | T[]) => dispatch({ type: MSG.ADD, payload: toArr<T>(adding) }),\n    [dispatch]\n  );\n\n  const remove = React.useCallback(\n    (removing: T | T[]) =>\n      dispatch({ type: MSG.REMOVE, payload: toArr<T>(removing) }),\n    [dispatch]\n  );\n\n  const reset = React.useCallback(\n    () => dispatch({ type: MSG.RESET, payload: initialSelected }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dispatch]\n  );\n\n  const touched = state.initialSelected.length !== state.selected.length;\n\n  return {\n    ...state,\n    add,\n    remove,\n    reset,\n    touched,\n  };\n}\n\nexport { useSelection };\n"],"names":["difference","source","items","filter","filterFn","a","b","s","some","i","toArr","Array","isArray","defaultCompareFn","check","id","Error","reducer","state","msg","type","selected","payload","compareFn","reduce","prev","next","p","push","initialSelected","React","useReducer","dispatch","add","useCallback","adding","remove","removing","reset","touched","length"],"mappings":"wWA6CgBA,EACdC,EACAC,EACAC,OAEMC,EACc,mBAAXD,EAAwBA,EAAS,SAACE,EAAQC,UAAWD,IAAMC,UAC7DL,EAAOE,QAAO,SAAAI,UAAML,EAAMM,MAAK,SAAAC,UAAKL,EAASG,EAAGE,kBAKzCC,EAASR,UACfS,MAAMC,QAAQV,aAAuBA,GAAd,CAACA,GC3BlC,SAASW,EAAiBZ,EAAaa,MACf,iBAAXb,GAAwC,iBAAVa,SAChCb,IAAWa,EACb,GAAqB,iBAAVA,GAAuC,iBAAVA,SACtCb,EAAOc,KAAOD,EAAMC,SAEvB,IAAIC,MAAM,yCAGlB,SAASC,EAAWC,EAAiBC,UAC3BA,EAAIC,UAtBP,oBAyBIF,OACHG,UD1BNpB,EC0ByBiB,EAAMG,SDzB/BnB,ECyByCiB,EAAIG,QDxB7CnB,ECwBsDe,EAAMK,UDtBtDnB,EACc,mBAAXD,EAAwBA,EAAS,SAACE,EAAQC,UAAWD,IAAMC,GAE7DJ,EAAMsB,QACX,SAACC,EAAMC,UACAD,EAAKjB,MAAK,SAAAmB,UAAKvB,EAASuB,EAAGD,OAC9BD,EAAKG,KAAKF,GAELD,cAELxB,WCbE,uBA8BCiB,OACHG,SAAUrB,EAAckB,EAAMG,SAAUF,EAAIG,QAASJ,EAAMK,iBA9B1D,sBAmCEL,OACHG,SAAUH,EAAMW,iCAUXX,MDhDXjB,EACAC,EACAC,EAEMC,uBCkDR,6BAGgB,SAFdyB,gBAAAA,aAAkB,SAClBN,YAE0BO,EAAMC,WAE9Bd,EAAS,CACTI,SAAUQ,EACVA,gBAAiBA,EACjBN,qBAPUV,MAELK,OAAOc,OAQRC,EAAMH,EAAMI,aAChB,SAACC,UAAoBH,EAAS,CAAEZ,KAnE7B,MAmE4CE,QAASZ,EAASyB,OACjE,CAACH,IAGGI,EAASN,EAAMI,aACnB,SAACG,UACCL,EAAS,CAAEZ,KAxEP,SAwEyBE,QAASZ,EAAS2B,OACjD,CAACL,IAGGM,EAAQR,EAAMI,aAClB,kBAAMF,EAAS,CAAEZ,KA5EZ,QA4E6BE,QAASO,OAE1CG,IAGGO,EAAUrB,EAAMW,gBAAgBW,SAAWtB,EAAMG,SAASmB,qBAG3DtB,OACHe,IAAAA,EACAG,OAAAA,EACAE,MAAAA,EACAC,QAAAA"}